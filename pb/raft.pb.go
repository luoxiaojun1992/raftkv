// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raftleader.proto

package raftkv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddNodeRequest struct {
	NodeAddr             string   `protobuf:"bytes,1,opt,name=nodeAddr,proto3" json:"nodeAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNodeRequest) Reset()         { *m = AddNodeRequest{} }
func (m *AddNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddNodeRequest) ProtoMessage()    {}
func (*AddNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *AddNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNodeRequest.Unmarshal(m, b)
}
func (m *AddNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNodeRequest.Marshal(b, m, deterministic)
}
func (m *AddNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeRequest.Merge(m, src)
}
func (m *AddNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddNodeRequest.Size(m)
}
func (m *AddNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeRequest proto.InternalMessageInfo

func (m *AddNodeRequest) GetNodeAddr() string {
	if m != nil {
		return m.NodeAddr
	}
	return ""
}

type AddNodeReply struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNodeReply) Reset()         { *m = AddNodeReply{} }
func (m *AddNodeReply) String() string { return proto.CompactTextString(m) }
func (*AddNodeReply) ProtoMessage()    {}
func (*AddNodeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *AddNodeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNodeReply.Unmarshal(m, b)
}
func (m *AddNodeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNodeReply.Marshal(b, m, deterministic)
}
func (m *AddNodeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNodeReply.Merge(m, src)
}
func (m *AddNodeReply) XXX_Size() int {
	return xxx_messageInfo_AddNodeReply.Size(m)
}
func (m *AddNodeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNodeReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddNodeReply proto.InternalMessageInfo

func (m *AddNodeReply) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*AddNodeRequest)(nil), "raftkv.AddNodeRequest")
	proto.RegisterType((*AddNodeReply)(nil), "raftkv.AddNodeReply")
}

func init() { proto.RegisterFile("raftleader.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4a, 0x4c, 0x2b,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0xb1, 0xb3, 0xcb, 0x94, 0x74, 0xb8, 0xf8,
	0x1c, 0x53, 0x52, 0xfc, 0xf2, 0x53, 0x52, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4,
	0xb8, 0x38, 0xf2, 0xf2, 0x53, 0x52, 0x1d, 0x53, 0x52, 0x8a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0xe0, 0x7c, 0x25, 0x35, 0x2e, 0x1e, 0xb8, 0xea, 0x82, 0x9c, 0x4a, 0x21, 0x31, 0x2e, 0xb6,
	0xa2, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0xb0, 0x4a, 0x8e, 0x20, 0x28, 0xcf, 0xc8, 0x91, 0x8b, 0x25,
	0x28, 0x31, 0xad, 0x44, 0xc8, 0x92, 0x8b, 0x1d, 0xaa, 0x5e, 0x48, 0x4c, 0x0f, 0x62, 0xa3, 0x1e,
	0xaa, 0x75, 0x52, 0x22, 0x18, 0xe2, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x77, 0x1a,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xca, 0xcc, 0x0c, 0xb5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeReply, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeReply, error) {
	out := new(AddNodeReply)
	err := c.cc.Invoke(ctx, "/raftkv.Raft/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	AddNode(context.Context, *AddNodeRequest) (*AddNodeReply, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) AddNode(ctx context.Context, req *AddNodeRequest) (*AddNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftkv.Raft/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raftkv.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _Raft_AddNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftleader.proto",
}
